ret <- rep(0,length(rot.q))
for(i in 1:length(ret)){
tmp <- Conj(rot.q[i]) * x2.q * rot.q[i]
tmp.x2 <- cbind(i(tmp),j(tmp),k(tmp))
ret[i] <- my.vonMises.like(x1,tmp.x2,k=k,log=log)
}
return(ret)
}
D.array <- array(0,c(n.dist,n.dist,length(rot.q)))
for(i in 1:(n.dist-1)){
for(j in i:n.dist){
D.array[i,j,] <- my.distributional.quant(X.list[[i]],X.list[[j]],rot.q=rot.q,k=1)
}
}
# Nは乱点の数を決める引数
# f1 は黄金比の値をデフォルトとする値。この値を黄金比から変えると格子としての良い性格がなくなる
# k=1をデフォルトとし、フィボナッチ格子を描くためにはk=1。ただし、その背景にあるらせんを描くためにはこの値をいじって、らせん上の点の数を増やす必要がある
fib.lattice.S2 <-function(N,f1=(sqrt(5)+1)/2,k=1){
f2 <- f1-1 # 黄金比はx^2-x-1=0の１つの根。もう１つの根を取り出す
#P <- 2*N+1
i <- seq(from=-N, to=N,by=k)
theta <- asin(2*i/(2*N+1))
phi <- 2*pi*i*f2
x <- cos(theta)*cos(phi)
y <- cos(theta)*sin(phi)
z <- sin(theta)
return(cbind(x,y,z))
}
library(rgl)
# フィボナッチ格子点の座標
N <- 100
fl <- fib.lattice.S2(N)
plot3d(fl)
# らせんの座標
N2 <- N
fl2 <- fib.lattice.S2(N2,k=0.01)
# らせんを描いて
plot3d(rbind(fl2),radius=0.01)
# フィボナッチ格子を重ね描き
points3d(fl,size=10)
#rgl.snapshot("fib.png")
# 回転クオータニオンをフィボナッチ球面上らせんを軸として発生
# Nは単位純虚四元数ベクトル数
# nは回転角の数
library(onion)
my.fib.rot.q <- function(N,n){
fl <- fib.lattice.S2(N)
fl.q <- fl[,1] * Hi + fl[,2] * Hj + fl[,3] * Hk
theta <- seq(from=0,to=1,length = n+1)
theta <- theta[-n]
tmp <- expand.grid(theta,1:length(fl.q))
return(cos(tmp[,1]/2) + sin(tmp[,1]/2) * fl.q[tmp[,2]])
}
rot.q <- my.fib.rot.q(100,100)
my.vonMises.like <- function(X1,X2,k,log=FALSE){
n1 <- length(X1[,1])
n2 <- length(X2[,1])
tmp <- k * sum(X1 %*% t(X2))/(n1*n2)
if(!log){
tmp <- exp(tmp)
}
return(tmp)
}
my.rot3d.by.q <- function(x,q){
tmp.x <- Hi * x[1] + Hj * x[2] + Hk * x[3]
rot.x <- Conj(q) * tmp.x * q
return(c(i(rot.x),j(rot.x),k(rot.x)))
}
my.rotmat.q <- function(q){
m <- matrix(0,3,3)
m[1,1] <- 1-2*(j(q)^2 + k(q)^2)
m[1,2] <- 2 * (i(q)*j(q) - k(q)*Re(q))
m[1,3] <- 2 * (i(q) * k(q) + j(q) * Re(q))
m[2,1] <- 2*(i(q) * j(q) + k(q) * Re(q))
m[2,2] <- 1- 2 *(i(q)^2 + k(q)^2)
m[2,3] <- 2 * (j(q) * k(q) - i(q) * Re(q))
m[3,1] <- 2 * (i(q) * k(q) - j(q) * Re(q))
m[3,2] <- 2 * (j(q) * k(q) + i(q) * Re(q))
m[3,3] <- 1- 2 * (i(q)^2 + j(q)^2)
return(m)
}
my.distributional.quant <- function(x1,x2,k,rot.q=NULL,N=100,n=100,log=FALSE){
if(is.null(rot.q)){
rot.q <- my.fib.rot.q(N,n)
}
#x2.q <- x2[,1] * Hi + x2[,2] * Hj + x2[,3] * Hk
ret <- rep(0,length(rot.q))
for(i in 1:length(ret)){
#tmp <- Conj(rot.q[i]) * x2.q * rot.q[i]
#tmp.x2 <- cbind(i(tmp),j(tmp),k(tmp))
tmp.x2 <- t(my.rotmat.q(rot.q[i]) %*% x2)
ret[i] <- my.vonMises.like(x1,tmp.x2,k=k,log=log)
}
return(ret)
}
D.array <- array(0,c(n.dist,n.dist,length(rot.q)))
for(i in 1:(n.dist-1)){
for(j in i:n.dist){
D.array[i,j,] <- my.distributional.quant(X.list[[i]],X.list[[j]],rot.q=rot.q,k=1,log=TRUE)
}
}
my.rotmat.q(rot.q[1])
my.distributional.quant <- function(x1,x2,k,rot.q=NULL,N=100,n=100,log=FALSE){
if(is.null(rot.q)){
rot.q <- my.fib.rot.q(N,n)
}
#x2.q <- x2[,1] * Hi + x2[,2] * Hj + x2[,3] * Hk
ret <- rep(0,length(rot.q))
for(i in 1:length(ret)){
#tmp <- Conj(rot.q[i]) * x2.q * rot.q[i]
#tmp.x2 <- cbind(i(tmp),j(tmp),k(tmp))
tmp.x2 <- t(my.rotmat.q(rot.q[i]) %*% t(x2))
ret[i] <- my.vonMises.like(x1,tmp.x2,k=k,log=log)
}
return(ret)
}
D.array <- array(0,c(n.dist,n.dist,length(rot.q)))
for(i in 1:(n.dist-1)){
for(j in i:n.dist){
D.array[i,j,] <- my.distributional.quant(X.list[[i]],X.list[[j]],rot.q=rot.q,k=1,log=TRUE)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(dirichletprocess)
N <- 1000
alpha <- 5
s <- StickBreaking(alpha,N)
plot(cumsum(s))
sum(s) # 1
z <- sample(1:N,N,replace=TRUE,prob=s)
plot(z)
t <- table(z)
# もしくは
t <- rmultinom(1,N,prob=s)
plot(t,type="h")
sum(t) # Nに一致
my.runifS2 <- function(n){
X <- matrix(rnorm(n*3),ncol=3)
X <- X/sqrt(apply(X^2,1,sum))
return(X)
}
mus <- my.runifS2(N)
library(MCMCpack)
sigmas <- list()
df <- 3
m <- matrix(c(1,0,0,1),2,2) * 0.01
for(i in 1:N){
sigmas[[i]] <- rwish(df,m)
}
library(mvtnorm)
x <- matrix(0,N,2)
for(i in 1:N){
x[i,] <- rmvnorm(1,c(0,0),sigmas[[i]])
}
# pが接点
# x が球面上の点
# 関数の帰り値にpを加えた座標が切平面に乗る
my.Riemannian.log <- function(x,p){
cos.t <- sum(x*p)
if(abs(cos.t)>1){
cos.t <- sign(cos.t) * 1
}
t <- acos(cos.t)
return((x-p*cos.t)*t/sin(t))
}
# 上記 log関数の逆関数
my.Riemannian.Exp <- function(x,p){
r <- sqrt(sum(x^2))
ret <- p * cos(r) + x/r*sin(r)
return(ret)
}
library(rgl)
x <- my.runifS2(1000)
p <- my.runifS2(1)
## xxは点 pからのベクトル
xx <- t(apply(x,1,my.Riemannian.log,p))
xx_p <- t(t(xx) + c(p))
plot3d(x)
spheres3d(p,color="red",radius=0.1)
spheres3d(xx_p,radius=0.05)
s <- sample(1:length(x[,1]),100)
for(i in 1:length(s)){
segments3d(rbind(x[s[i],],xx_p[s[i],]))
}
y <- t(apply(xx,1,my.Riemannian.Exp,p))
plot3d(y)
plot(c(x),c(y)) # 元に戻っている
# こちらは、接点pが(0,0,1)とみなし、二次元平面上の点xをxy平面上の点とし
# 球面に写像した上で
# (0,0,1)を接点pに移す大円回転でxの対応点も移す
my.Tp2S2 <- function(x,p){
tmp.p <- c(0,0,1)
# 回転させたいが、まず、pのz = 1平面上の対応点をとる
p. <- my.Riemannian.log(p,tmp.p)
p. <- c(p.[1:2],0)
# その方向の単位ベクトルにする
p. <- p./sqrt(sum(p.^2))
# p.と直交するベクトルを取る
q. <- c(p.[2],-p.[1],0)
# z = 1 平面上で (x-tmp.p)ベクトルを、(p.-tmp.p)と(q.-tmp.p)の線形和で表すこととし
# その係数を求める
M <- cbind(p.[1:2],q.[1:2])
coefs <- solve(M) %*% x
# tmp.pでの接平面をpでの接平面に移す
# ベクトル p. - tmp. p が p.' - p に移るとき
# p.' - pは以下に代わる
# theta はtmp.pとpとの角
theta <- acos(sum(tmp.p*p))
p.._p <- c(cos(theta)*p.[1:2],-sin(theta))
# q. - tmp.p = q.' - pとなる
q.._p <- q.
#M. <- cbind(p.._p,q.._q)
x._p <- coefs[1] * p.._p + coefs[2] * q.._p
x. <- c(x._p) + c(p)
#return(x.)
return(my.Riemannian.Exp(x._p,p))
}
mu <- my.runifS2(1)
sigma <- matrix(c(0.5,0.4,0.4,0.5),2,2)
n <- 1000
x2d <- rmvnorm(n,c(0,0),sigma)
plot(x2d)
x3d <- t(apply(x2d,1,my.Tp2S2,mu))
plot3d(x3d)
spheres3d(mu,radius=0.1,color="red")
my.DPMMS2 <- function(N,alpha=10,df=3,m=matrix(c(1,0,0,1),2,2)*0.01,sms=NULL){
if(is.null(sms)){
s <- StickBreaking(alpha,N)
mus <- my.runifS2(N)
sigmas <- list()
for(i in 1:N){
sigmas[[i]] <- rwish(df,m)
}
}else{
s <- sms$s
mus <- sms$mus
sigmas <- sms$sigmas
}
t <- rmultinom(1,N,prob=s)
x <- matrix(0,N,3)
cnt <- 1
for(i in 1:length(t)){
if(t[i]!=0){
x2d <- matrix(rmvnorm(t[i],c(0,0),sigmas[[i]]),ncol=2)
x3d <- t(apply(x2d,1,my.Tp2S2,mus[i,]))
x[cnt:(cnt+t[i]-1),] <- x3d
cnt <- cnt + t[i]
}
}
return(list(x=x,s=s,t=t,mus=mus,sigmas=sigmas))
}
my.plot3d.dpmms2 <- function(out,r=0.05){
x <- out$x
t <- out$t
plot3d(x)
cnt <- 1
for(i in 1:length(t)){
if(t[i]!=0){
spheres3d(x[cnt:(cnt+t[i]-1),],color=i,radius=0.05)
cnt <- cnt + t[i]
}
}
}
# Nは乱点の数を決める引数
# f1 は黄金比の値をデフォルトとする値。この値を黄金比から変えると格子としての良い性格がなくなる
# k=1をデフォルトとし、フィボナッチ格子を描くためにはk=1。ただし、その背景にあるらせんを描くためにはこの値をいじって、らせん上の点の数を増やす必要がある
fib.lattice.S2 <-function(N,f1=(sqrt(5)+1)/2,k=1){
f2 <- f1-1 # 黄金比はx^2-x-1=0の１つの根。もう１つの根を取り出す
#P <- 2*N+1
i <- seq(from=-N, to=N,by=k)
theta <- asin(2*i/(2*N+1))
phi <- 2*pi*i*f2
x <- cos(theta)*cos(phi)
y <- cos(theta)*sin(phi)
z <- sin(theta)
return(cbind(x,y,z))
}
library(rgl)
# フィボナッチ格子点の座標
N <- 100
fl <- fib.lattice.S2(N)
plot3d(fl)
# らせんの座標
N2 <- N
fl2 <- fib.lattice.S2(N2,k=0.01)
# らせんを描いて
plot3d(rbind(fl2),radius=0.01)
# フィボナッチ格子を重ね描き
points3d(fl,size=10)
#rgl.snapshot("fib.png")
# 回転クオータニオンをフィボナッチ球面上らせんを軸として発生
# Nは単位純虚四元数ベクトル数
# nは回転角の数
library(onion)
my.fib.rot.q <- function(N,n){
fl <- fib.lattice.S2(N)
fl.q <- fl[,1] * Hi + fl[,2] * Hj + fl[,3] * Hk
theta <- seq(from=0,to=1,length = n+1)
theta <- theta[-n]
tmp <- expand.grid(theta,1:length(fl.q))
return(cos(tmp[,1]/2) + sin(tmp[,1]/2) * fl.q[tmp[,2]])
}
rot.q <- my.fib.rot.q(100,100)
my.vonMises.like <- function(X1,X2,k,log=FALSE){
n1 <- length(X1[,1])
n2 <- length(X2[,1])
tmp <- k * sum(X1 %*% t(X2))/(n1*n2)
if(!log){
tmp <- exp(tmp)
}
return(tmp)
}
my.rot3d.by.q <- function(x,q){
tmp.x <- Hi * x[1] + Hj * x[2] + Hk * x[3]
rot.x <- Conj(q) * tmp.x * q
return(c(i(rot.x),j(rot.x),k(rot.x)))
}
my.rotmat.q <- function(q){
m <- matrix(0,3,3)
m[1,1] <- 1-2*(j(q)^2 + k(q)^2)
m[1,2] <- 2 * (i(q)*j(q) - k(q)*Re(q))
m[1,3] <- 2 * (i(q) * k(q) + j(q) * Re(q))
m[2,1] <- 2*(i(q) * j(q) + k(q) * Re(q))
m[2,2] <- 1- 2 *(i(q)^2 + k(q)^2)
m[2,3] <- 2 * (j(q) * k(q) - i(q) * Re(q))
m[3,1] <- 2 * (i(q) * k(q) - j(q) * Re(q))
m[3,2] <- 2 * (j(q) * k(q) + i(q) * Re(q))
m[3,3] <- 1- 2 * (i(q)^2 + j(q)^2)
return(m)
}
my.distributional.quant <- function(x1,x2,k,rot.q=NULL,N=100,n=100,log=FALSE){
if(is.null(rot.q)){
rot.q <- my.fib.rot.q(N,n)
}
#x2.q <- x2[,1] * Hi + x2[,2] * Hj + x2[,3] * Hk
ret <- rep(0,length(rot.q))
for(i in 1:length(ret)){
#tmp <- Conj(rot.q[i]) * x2.q * rot.q[i]
#tmp.x2 <- cbind(i(tmp),j(tmp),k(tmp))
tmp.x2 <- t(my.rotmat.q(rot.q[i]) %*% t(x2))
ret[i] <- my.vonMises.like(x1,tmp.x2,k=k,log=log)
}
return(ret)
}
n.dist <- 30
N <- 100
alpha <- 10
#s <- StickBreaking(alpha,N)
mus <- my.runifS2(N)
df=3
m=matrix(c(1,0,0,1),2,2)*0.01
sigmas <- list()
for(i in 1:N){
sigmas[[i]] <- rwish(df,m)
}
X.list <- list()
for(i in 1:n.dist){
tmps <- StickBreaking(alpha,N)
X.list[[i]] <- my.DPMMS2(N,sms=list(s=tmps,mus=mus,sigmas=sigmas))$x
}
Nfib <- 20
n <- 10
rot.q <- my.fib.rot.q(Nfib,n)
D.array <- array(0,c(n.dist,n.dist,length(rot.q)))
for(i in 1:(n.dist-1)){
for(j in i:n.dist){
D.array[i,j,] <- my.distributional.quant(X.list[[i]],X.list[[j]],rot.q=rot.q,k=1,log=TRUE)
}
}
image(D[1,,])
image(D.array[1,,])
image(D.array[,1,])
image(D.array[,,1])
image(D.array[,,2])
image(D.array[,,3])
image(D.array[,,4])
image(D.array[,,100])
image(D.array[,,150])
image(D.array[1,,])
image(D.array[,1,])
image(D.array[,2,])
image(D.array[,100,])
image(D.array[,14,])
hist(D.array[1,2,])
D.array[1,1,1]
D.array[2,2,1]
D.array[3,3,1]
D.array. <- D.array
for(i in 1:length(rot.q)){
D.array.[,,i] <- D.array[,,i] + t(D.array[,,i])
diag(D.array.[,,i]) <- diag(D.array[,,i])
}
hist(D.array.[,,1])
hist(D.array.[,,2])
hist(D.array.[,,3])
hist(D.array.[,,4])
hist(D.array.[,,5])
apply(D.array.,3,mean)
plot(apply(D.array.,3,mean))
mean(D.array.[,,1])
mean(D.array.[,,2])
plot(sort(D.array.[,,1]))
points(sort(D.array.[,,2]),col=2)
points(sort(D.array.[,,3]),col=3)
hist(apply(D.array.,3,mean))
hist(D.array.[1,1,])
hist(D.array.[2,2,])
hist(D.array.[3,3,])
plot(apply(D.array.,3,min))
plot(apply(D.array.,3,min),type="l")
plot(apply(D.array.,3,min))
image(apply(D.array.,3,min))
image(matrix(apply(D.array.,3,min),n.dist,n.dist))
image(matrix(apply(D.array,3,min),n.dist,n.dist))
dim(D.array)
dim(D.array.)
length(apply(D.array.,3,mean))
length(apply(D.array.,3,min))
image(matrix(apply(D.array,c(1,2),min),n.dist,n.dist))
image(matrix(apply(D.array.,c(1,2),min),n.dist,n.dist))
image(apply(D.array.,c(1,2),min))
image(apply(D.array.,c(1,2),max))
image(apply(D.array.,c(1,2),mean))
image(apply(D.array.,c(1,2),min))
D.array2 <- array(0,c(n.dist,n.dist,length(rot.q)))
for(i in 1:(n.dist-1)){
for(j in i:n.dist){
D.array[i,j,] <- my.distributional.quant(X.list[[i]],X.list[[j]],rot.q=rot.q,k=100,log=TRUE)
}
}
D.array2. <- D.array2
for(i in 1:length(rot.q)){
D.array2.[,,i] <- D.array2[,,i] + t(D.array2[,,i])
diag(D.array2.[,,i]) <- diag(D.array2[,,i])
}
image(apply(D.array2.,c(1,2),min))
par(mfcol=c(1,2))
image(apply(D.array.,c(1,2),min))
image(apply(D.array2.,c(1,2),min))
par(mfcol=c(1,2))
image(apply(D.array.,c(1,2),min))
image(apply(D.array2.,c(1,2),min))
image(apply(D.array.,c(1,2),mean))
image(apply(D.array2.,c(1,2),mean))
plot(D.array2.)
D.array2[1,1,1]
D.array2[1,1,10]
range(D.array2)
D.array <- array(0,c(n.dist,n.dist,length(rot.q)))
for(i in 1:(n.dist-1)){
for(j in i:n.dist){
D.array[i,j,] <- my.distributional.quant(X.list[[i]],X.list[[j]],rot.q=rot.q,k=1,log=TRUE)
}
}
D.array. <- D.array
for(i in 1:length(rot.q)){
D.array.[,,i] <- D.array[,,i] + t(D.array[,,i])
diag(D.array.[,,i]) <- diag(D.array[,,i])
}
D.array2 <- array(0,c(n.dist,n.dist,length(rot.q)))
for(i in 1:(n.dist-1)){
for(j in i:n.dist){
D.array2[i,j,] <- my.distributional.quant(X.list[[i]],X.list[[j]],rot.q=rot.q,k=100,log=TRUE)
}
}
D.array2. <- D.array2
for(i in 1:length(rot.q)){
D.array2.[,,i] <- D.array2[,,i] + t(D.array2[,,i])
diag(D.array2.[,,i]) <- diag(D.array2[,,i])
}
par(mfcol=c(1,2))
image(apply(D.array.,c(1,2),min))
image(apply(D.array2.,c(1,2),min))
image(apply(D.array.,c(1,2),mean))
image(apply(D.array2.,c(1,2),mean))
par(mfcol=c(1,2))
image(apply(D.array.,c(1,2),min))
image(apply(D.array2.,c(1,2),min))
image(apply(D.array.,c(1,2),mean))
image(apply(D.array2.,c(1,2),mean))
image(apply(D.array.,c(1,2),min)-apply(D.array2.,c(1,2),min))
image(apply(D.array.,c(1,2),mean)-apply(D.array2.,c(1,2),mean))
par(mfcol=c(1,2))
image(apply(D.array.,c(1,2),min))
image(apply(D.array2.,c(1,2),min))
image(apply(D.array.,c(1,2),mean))
image(apply(D.array2.,c(1,2),mean))
image(apply(D.array.,c(1,2),min)-apply(D.array2.,c(1,2),min))
image(apply(D.array.,c(1,2),mean)-apply(D.array2.,c(1,2),mean))
hist(apply(D.array.,c(1,2),min))
hist(apply(D.array2.,c(1,2),min))
hist(apply(D.array.,c(1,2),mean))
hist(apply(D.array2.,c(1,2),mean))
hist(apply(D.array.,c(1,2),min)-apply(D.array2.,c(1,2),min))
hist(apply(D.array.,c(1,2),mean)-apply(D.array2.,c(1,2),mean))
par(mfcol=c(1,2))
image(apply(D.array.,c(1,2),min))
image(apply(D.array2.,c(1,2),min))
image(apply(D.array.,c(1,2),mean))
image(apply(D.array2.,c(1,2),mean))
image(apply(D.array.,c(1,2),var))
image(apply(D.array2.,c(1,2),var))
image(apply(D.array.,c(1,2),min)-apply(D.array2.,c(1,2),min))
image(apply(D.array.,c(1,2),mean)-apply(D.array2.,c(1,2),mean))
hist(apply(D.array.,c(1,2),min))
hist(apply(D.array2.,c(1,2),min))
hist(apply(D.array.,c(1,2),mean))
hist(apply(D.array2.,c(1,2),mean))
hist(apply(D.array.,c(1,2),var))
hist(apply(D.array2.,c(1,2),var))
hist(apply(D.array.,c(1,2),min)-apply(D.array2.,c(1,2),min))
hist(apply(D.array.,c(1,2),mean)-apply(D.array2.,c(1,2),mean))
