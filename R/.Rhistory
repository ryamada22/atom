# 内接点を定める角度
theta <- runif(1)*2*pi
# 内接円の半径
r <- runif(1)*0.5 + 0.25
# 内接円の中心座標
ctr <- (1-r) * c(cos(theta),sin(theta))
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
# このうち、円板上の点のみを選ぶ
#s <- which(apply(pnts^2,1,sum) < 1)
#pnts <- pnts[s,]
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=2)
# 内接点を定める角度
theta <- runif(1)*2*pi
# 内接円の半径
r <- runif(1)*0.5 + 0.25
# 内接円の中心座標
ctr <- (1-r) * c(cos(theta),sin(theta))
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=2)
n.line <- 10
t.samples <- sample(1:length(t),n.line)
for(i in 1:n.line){
P <- c(cos(theta),sin(theta)) # 内接点
Q <- pnts[t.samples[i],]
tmp <- my.orth.circle2(P,Q)
r <- tmp$r
ctr <- tmp$ctr
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
points(pnts,type="l",col=i+1)
}
t.samples
dim(pnts)
# 内接点を定める角度
theta <- runif(1)*2*pi
# 内接円の半径
r <- runif(1)*0.5 + 0.25
# 内接円の中心座標
ctr <- (1-r) * c(cos(theta),sin(theta))
t <- seq(from=0,to=1,length=1000)*2*pi
pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
plot(cos(t),sin(t),type="l",asp=1)
points(pnts,type="l",col=2)
n.line <- 10
t.samples <- sample(1:length(t),n.line)
for(i in 1:n.line){
P <- c(cos(theta),sin(theta)) # 内接点
Q <- pnts[t.samples[i],]
tmp <- my.orth.circle2(P,Q)
r <- tmp$r
ctr <- tmp$ctr
tmp.pnts <- cbind(r*cos(t)+ctr[1],r*sin(t)+ctr[2])
points(tmp.pnts,type="l",col=i+1)
}
n.sample <- 50
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r*dnorm(x,m1,sd1) + (1-r) * dnorm(x,m2,sd2)
}
matplot(t(ps),type="l")
plot(ps[1,])
n.sample <- 50
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
matplot(t(ps),type="l")
r
ps
matplot(t(ps),type="l")
n.sample <- 50
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
matplot(t(ps),type="l")
matplot(t(ps),type="l")
n.sample <- 50
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
ps <- ps/apply(ps,1,sum)
matplot(t(ps),type="l")
n.sample <- 50
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
ps <- ps/apply(ps,1,sum)
matplot(t(ps),type="l")
ipmat <- ps %*% t(ps)
image(ipmat)
ipmat <- ps %*% t(ps)
logipmat <- log(ipmat)/2
eigen.out <- eigen(logipmat)
eigen.out[[1]]
ipmat <- ps %*% t(ps)
logipmat <- log(ipmat)/2
eigen.out <- eigen(logipmat)
plot(eigen.out[[1]])
cols <- c(1,length(eigen.out[[1]]))
x.time <- t(eigen.out[[2]][,cols]) * sqrt(abs(eigen.out[[1]][cols]))
plot(x.time)
cols <- c(1,length(eigen.out[[1]]))
x.time <- t(t(eigen.out[[2]][,cols]) * sqrt(abs(eigen.out[[1]][cols])))
plot(x.time)
x.time[,1]^2 - x.time[,2]^2
ptntl <- x.time[,1]^2 - x.time[,2]^2
plot(sort(ptntl))
plot(r,ptntl)
n.sample <- 200
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 3
sd2 <- 0.2
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
ps <- ps/apply(ps,1,sum)
matplot(t(ps),type="l")
ipmat <- ps %*% t(ps)
logipmat <- log(ipmat)/2
eigen.out <- eigen(logipmat)
plot(eigen.out[[1]])
cols <- c(1,length(eigen.out[[1]]))
x.time <- t(t(eigen.out[[2]][,cols]) * sqrt(abs(eigen.out[[1]][cols])))
plot(x.time)
ptntl <- x.time[,1]^2 - x.time[,2]^2
plot(sort(ptntl))
plot(r,ptntl)
n.sample <- 200
r <- runif(n.sample)
m1 <- 0
sd1 <- 1
m2 <- 1
sd2 <- 1
x <- seq(from=-5,to=5,length=1000)
ps <- matrix(0,n.sample,length(x))
for(i in 1:n.sample){
ps[i,] <- r[i]*dnorm(x,m1,sd1) + (1-r[i]) * dnorm(x,m2,sd2)
}
ps <- ps/apply(ps,1,sum)
matplot(t(ps),type="l")
ipmat <- ps %*% t(ps)
logipmat <- log(ipmat)/2
eigen.out <- eigen(logipmat)
plot(eigen.out[[1]])
cols <- c(1,length(eigen.out[[1]]))
x.time <- t(t(eigen.out[[2]][,cols]) * sqrt(abs(eigen.out[[1]][cols])))
plot(x.time)
ptntl <- x.time[,1]^2 - x.time[,2]^2
plot(sort(ptntl))
plot(r,ptntl)
abs(eigen.out[[1]][cols])
eigen.out[[2]][,cols]
apply(eigen.out[[2]][,cols],2,range)
apply(x.time,2,range)
# ベクトルxの最後の座標が時間軸とする
my.pdisk.coords.R <- function(x){
t <- x[length(x)]
x. <- x[-length(x)]
R <- sqrt(-sum(x^2) + 2 * t^2)
u <- R*x./(R+t)
return(list(u=u,R=R))
}
my.pdisk.coords.inv.R <- function(u,R){
t <- R * (R^2+sum(u^2))/(R^2-sum(u^2))
x. <- 2*R^2*u/(R^2-sum(u^2))
return(c(x.,t))
}
x <- 0.4
y <- 0.3
z <- sqrt(x^2+y^2+1)
my.pdisk.coords(c(x,y,z))
my.pdisk.coords.R(c(x,y,z))
x <- 0.4
y <- 0.3
z <- sqrt(x^2+y^2+1)
u1 <- my.pdisk.coords(c(x,y,z))
u2 <- my.pdisk.coords.R(c(x,y,z))
print(u1)
print(u2)
my.pdisk.coords.inv(u1)
my.pdisk.coords.inv.R(u2$u,u2$R)
out <- my.pdisk.coords.R(x.time)
x.time
x.time[1,1]^2 - x.time[1.2]^2
x.time[1,1]^2 - x.time[1,2]^2
x <- x.time[1,]
x
t <- x[length(x)]
x. <- x[-length(x)]
R <- sqrt(-sum(x^2) + 2 * t^2)
u <- R*x./(R+t)
u
R
out <- apply(x.time,1,my.pdisk.coords.R)
dim(out)
out
out <- matrix(unlist(apply(x.time,1,my.pdisk.coords.R)),ncol=2,byrow=TRUE)
dim(out)
plot(out[,1])
plot(out[,2])
plot(out)
library(rgl)
plot3d(cbind(out,r))
plot(r,x.time[,1])
plot(out[,2],r)
plot(out[,1],r)
out[,1]
out <- matrix(unlist(apply(x.time,1,my.pdisk.coords.R)),ncol=2,byrow=TRUE)
out. <- matrix(unlist(apply(x.time,1,my.pdisk.coords)),ncol=2,byrow=TRUE)
plot(out[,1],out.)
dim(out)
length(out.)
out.
out <- matrix(unlist(apply(x.time,1,my.pdisk.coords.R)),ncol=2,byrow=TRUE)
out. <- apply(x.time,1,my.pdisk.coords)
plot(out[,1],out.)
out.
out <- matrix(unlist(apply(x.time,1,my.pdisk.coords.R)),ncol=2,byrow=TRUE)
out. <- apply(cbind(rep,0,length(x.time[,1]),x.time),1,my.pdisk.coords)
dim(x.time)
rep(0,length(x.time[,1]))
x.time
range(x.time[,2])
out <- matrix(unlist(apply(-x.time,1,my.pdisk.coords.R)),ncol=2,byrow=TRUE)
#out. <- apply(cbind(rep,0,length(x.time[,1]),x.time),1,my.pdisk.coords)
plot3d(cbind(out,r))
plot(out)
plot3d(cbind(out,r))
getwd()
setwd("C:/Users/ryamada/Desktop/git/atom/R/")
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(rgl)
library(igraph)
my.tri4 <- function(name="hoge"){
el <- rbind(c(1,2),c(1,3),c(1,4),c(2,3),c(3,4),c(4,2))
el <- matrix(paste(name,el,sep=""),ncol=2)
g <- graph.edgelist(el,directed=FALSE)
faces <- rbind(c(1,2,3),c(1,3,4),c(1,4,2),c(2,4,3))
faces <- matrix(paste(name,faces,sep=""),ncol=3)
return(list(g=g,faces=faces))
}
my.tri8 <- function(name="hoge"){
el <- rbind(c(1,2),c(1,3),c(1,4),c(1,5),c(2,3),c(3,4),c(4,5),c(2,5),c(2,6),c(3,6),c(4,6),c(5,6))
el <- matrix(paste(name,el,sep=""),ncol=2)
g <- graph.edgelist(el,directed=FALSE)
faces <- rbind(c(1,2,3),c(1,3,4),c(1,4,5),c(1,5,2),c(3,2,6),c(4,3,6),c(4,6,5),c(2,5,6))
faces <- matrix(paste(name,faces,sep=""),ncol=3)
return(list(g=g,faces=faces))
}
my.tri20 <- function(name="hoge"){
el <- rbind(c(1,2),c(1,3),c(1,4),c(1,5),c(1,6),c(2,3),c(3,4),c(4,5),c(5,6),c(2,6),c(2,7),c(6,7),c(2,8),c(3,8),c(3,9),c(4,9),c(4,10),c(5,10),c(5,11),c(6,11),c(7,8),c(8,9),c(9,10),c(10,11),c(7,11),c(7,12),c(8,12),c(9,12),c(10,12),c(11,12))
el <- matrix(paste(name,el,sep=""),ncol=2)
g <- graph.edgelist(el,directed=FALSE)
faces <- rbind(c(1,2,3),c(1,3,4),c(1,4,5),c(1,5,6),c(1,6,2),c(3,2,7),c(4,3,8),c(5,4,9),c(6,5,10),c(2,6,11),c(2,11,7),c(3,7,8),c(4,8,9),c(5,9,10),c(6,10,11),c(8,7,12),c(9,8,12),c(10,9,12),c(11,10,12),c(7,11,12))
faces <- matrix(paste(name,faces,sep=""),ncol=3)
return(list(g=g,faces=faces))
}
# g1の第i三角形とg2の第j三角形をはり合わせる
my.paste.g <- function(g1,g2,u,v){
f1 <- g1$faces[u,]
f2 <- g2$faces[v,]
el1 <- get.edgelist(g1$g)
el2 <- get.edgelist(g2$g)
for(i in 1:length(f1)){
el1[which(el1==f1[i])] <- f2[i]
}
new.el <- rbind(el1,el2)
new.el <- t(apply(new.el,1,sort))
new.el <- unique(new.el)
newg <- graph.edgelist(new.el,directed=FALSE)
new.faces <- rbind(g1$faces[-u,],g2$faces[-v,3:1])
for(i in 1:length(f1)){
new.faces[which(new.faces==f1[i])] <- f2[i]
}
return(list(g=newg,faces=new.faces))
}
g4A <- my.tri4("A")
plot(g4A$g) # 正四面体
g4B <- my.tri4("B")
# 正四面体の張り合わせ
gx <- my.paste.g(g4A,g4B,1,1)
# 張り合わせオブジェクト
plot(gx$g,layout=layout_in_circle)
# 張り合わせオブジェクトの６つの三角形
gx$faces
W.clock <- matrix(0,18,18)
W.clock[1,2] <- W.clock[2,3] <- W.clock[3,1] <- W.clock[4,5] <- W.clock[5,6] <- W.clock[6,11] <- W.clock[7,8] <- W.clock[8,14] <- W.clock[9,16] <- W.clock[10,9] <- W.clock[11,4] <- W.clock[12,15] <- W.clock[13,10] <- W.clock[14,7] <- W.clock[15,17] <- W.clock[16,13] <- W.clock[17,18] <- W.clock[18,12] <- 1
apply(W.clock,1,sum)
apply(W.clock,2,sum)
P <- diag(rep(1,18))
P <- P[,c(10:18,1:9)]
P
W.counter <- P %*% t(W.clock) %*% P
We <- W.clock + W.counter
image(We)
range(W.clock - t(P%*% W.counter %*%P))
We. <- W.clock + P %*% W.counter %*% P
image(We.)
range(We.-t(We.))
Vs <- list()
Vs[[1]] <- c(1,2,3)
Vs[[2]] <- c(4,5,6,11)
Vs[[3]] <- c(7,8,14)
Vs[[4]] <- c(10,9,16,13)
Vs[[5]] <- c(18,12,15,17)
for(i in 1:length(Vs)){
print(We[Vs[[i]],Vs[[i]]])
}
Vs2 <- list()
Vs2[[1]] <- c(1,2,4)
Vs2[[2]] <- c(4,5,7)
Vs2[[3]] <- c(7,8,9)
Vs2[[4]] <- c(5,6,8)
Vs2[[5]] <- c(1,3,9)
Vs2[[6]] <- c(2,3,6)
for(i in 1:length(Vs2)){
#Vs2[[i]] <- c(Vs2[[i]],Vs2[[i]]+9)
}
We.. <- W.clock + P %*% W.clock %*% P + W.counter + P %*% W.counter %*% P + P %*% W.clock + P %*% W.counter + W.clock %*% P + W.counter %*% P
for(i in 1:length(Vs2)){
print(We..[Vs2[[i]],Vs2[[i]]])
}
image(We..)
eigen(we..)
eigen(We..)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(rgl)
library(igraph)
my.tri4 <- function(name="hoge"){
el <- rbind(c(1,2),c(1,3),c(1,4),c(2,3),c(3,4),c(4,2))
el <- matrix(paste(name,el,sep=""),ncol=2)
g <- graph.edgelist(el,directed=FALSE)
faces <- rbind(c(1,2,3),c(1,3,4),c(1,4,2),c(2,4,3))
faces <- matrix(paste(name,faces,sep=""),ncol=3)
return(list(g=g,faces=faces))
}
my.tri8 <- function(name="hoge"){
el <- rbind(c(1,2),c(1,3),c(1,4),c(1,5),c(2,3),c(3,4),c(4,5),c(2,5),c(2,6),c(3,6),c(4,6),c(5,6))
el <- matrix(paste(name,el,sep=""),ncol=2)
g <- graph.edgelist(el,directed=FALSE)
faces <- rbind(c(1,2,3),c(1,3,4),c(1,4,5),c(1,5,2),c(3,2,6),c(4,3,6),c(4,6,5),c(2,5,6))
faces <- matrix(paste(name,faces,sep=""),ncol=3)
return(list(g=g,faces=faces))
}
my.tri20 <- function(name="hoge"){
el <- rbind(c(1,2),c(1,3),c(1,4),c(1,5),c(1,6),c(2,3),c(3,4),c(4,5),c(5,6),c(2,6),c(2,7),c(6,7),c(2,8),c(3,8),c(3,9),c(4,9),c(4,10),c(5,10),c(5,11),c(6,11),c(7,8),c(8,9),c(9,10),c(10,11),c(7,11),c(7,12),c(8,12),c(9,12),c(10,12),c(11,12))
el <- matrix(paste(name,el,sep=""),ncol=2)
g <- graph.edgelist(el,directed=FALSE)
faces <- rbind(c(1,2,3),c(1,3,4),c(1,4,5),c(1,5,6),c(1,6,2),c(3,2,7),c(4,3,8),c(5,4,9),c(6,5,10),c(2,6,11),c(2,11,7),c(3,7,8),c(4,8,9),c(5,9,10),c(6,10,11),c(8,7,12),c(9,8,12),c(10,9,12),c(11,10,12),c(7,11,12))
faces <- matrix(paste(name,faces,sep=""),ncol=3)
return(list(g=g,faces=faces))
}
# g1の第i三角形とg2の第j三角形をはり合わせる
my.paste.g <- function(g1,g2,u,v){
f1 <- g1$faces[u,]
f2 <- g2$faces[v,]
el1 <- get.edgelist(g1$g)
el2 <- get.edgelist(g2$g)
for(i in 1:length(f1)){
el1[which(el1==f1[i])] <- f2[i]
}
new.el <- rbind(el1,el2)
new.el <- t(apply(new.el,1,sort))
new.el <- unique(new.el)
newg <- graph.edgelist(new.el,directed=FALSE)
new.faces <- rbind(g1$faces[-u,],g2$faces[-v,3:1])
for(i in 1:length(f1)){
new.faces[which(new.faces==f1[i])] <- f2[i]
}
return(list(g=newg,faces=new.faces))
}
g4A <- my.tri4("A")
plot(g4A$g) # 正四面体
g4B <- my.tri4("B")
# 正四面体の張り合わせ
gx <- my.paste.g(g4A,g4B,1,1)
# 張り合わせオブジェクト
plot(gx$g,layout=layout_in_circle)
# 張り合わせオブジェクトの６つの三角形
gx$faces
W.clock <- matrix(0,18,18)
W.clock[1,2] <- W.clock[2,3] <- W.clock[3,1] <- W.clock[4,5] <- W.clock[5,6] <- W.clock[6,11] <- W.clock[7,8] <- W.clock[8,14] <- W.clock[9,16] <- W.clock[10,9] <- W.clock[11,4] <- W.clock[12,15] <- W.clock[13,10] <- W.clock[14,7] <- W.clock[15,17] <- W.clock[16,13] <- W.clock[17,18] <- W.clock[18,12] <- 1
apply(W.clock,1,sum)
apply(W.clock,2,sum)
P <- diag(rep(1,18))
P <- P[,c(10:18,1:9)]
P
W.counter <- P %*% t(W.clock) %*% P
We <- W.clock + W.counter
image(We)
range(W.clock - t(P%*% W.counter %*%P))
We. <- W.clock + P %*% W.counter %*% P
image(We.)
range(We.-t(We.))
Vs <- list()
Vs[[1]] <- c(1,2,3)
Vs[[2]] <- c(4,5,6,11)
Vs[[3]] <- c(7,8,14)
Vs[[4]] <- c(10,9,16,13)
Vs[[5]] <- c(18,12,15,17)
for(i in 1:length(Vs)){
print(We[Vs[[i]],Vs[[i]]])
}
Vs2 <- list()
Vs2[[1]] <- c(1,2,4)
Vs2[[2]] <- c(4,5,7)
Vs2[[3]] <- c(7,8,9)
Vs2[[4]] <- c(5,6,8)
Vs2[[5]] <- c(1,3,9)
Vs2[[6]] <- c(2,3,6)
for(i in 1:length(Vs2)){
#Vs2[[i]] <- c(Vs2[[i]],Vs2[[i]]+9)
}
We.. <- W.clock + P %*% W.clock %*% P + W.counter + P %*% W.counter %*% P + P %*% W.clock + P %*% W.counter + W.clock %*% P + W.counter %*% P
for(i in 1:length(Vs2)){
print(We..[Vs2[[i]],Vs2[[i]]])
}
image(We..)
eigen(We..)
eigen(We.)
Z <- matrix(0,18,18)
Z[1,4] <- Z[1,7] <- Z[1,18] <- 1
Z[2,c(13,14,15)] <- 1
Z[3,c(6,8,9)] <- Z[4,c(11,14,15)] <- Z[5,c(11,13,15)] <- Z[6,c(11,13,14)] <- 1
Z[7,c(5,17)] <- Z[8,c(5,16)] <- Z[9,c(4,7,10)] <- 1
Z[10,c(2,3)] <- Z[11,c(1,3)] <- Z[12,c(1,2)] <- Z[13,c(7,10,18)] <- Z[14,c(16,17)] <- 1
Z[15,c(8,9,12)] <- Z[16,c(4,10,18)] <- Z[17,c(6,9,12)] <- Z[18,c(6,8,12)] <- 1
eigen(Z)
sum(Z)
eigen(Z)
eigen(We)
we %*% solve(Z)
We %*% solve(Z)
Z %*% solve(We)
We.Z <- We %*% solve(Z)
Z.We <- Z %*% solve(We)
We.Z2 <- solve(Z) %*% We
Z.We2 <- solve(We) %*% Z
WexZ <- We %*% Z
ZxWe <- Z %*% We
image(We.Z)
image(We.Z2)
image(Z.We)
image(Z.We2)
image(WexZ)
image(ZxWe)
We.Z
We.Z2
Z.We
Z.We2
WexZ
ZxWe
apply(We.Z,1,sum)
apply(We.Z,2,sum)
apply(We.Z2,1,sum)
apply(We.Z2,2,sum)
apply(Z.We,1,sum)
apply(Z.We,2,sum)
apply(Z.We2,1,sum)
apply(Z.We2,2,sum)
apply(WexZ,1,sum)
apply(WexZ,2,sum)
apply(ZxWe,1,sum)
apply(ZxWe,2,sum)
sum(We.Z)
sum(We.Z2)
sum(Z.We)
sum(Z.We2)
sum(WexZ)
sum(ZxWe)
